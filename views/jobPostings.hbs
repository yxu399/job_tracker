{{!-- jobPostings.hbs --}}
<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
</head>

{{!-- NavBar --}}
<nav class="navbar navbar-expand navbar-light" style="background-color: #e3f2fd;">
  <div class="container-fluid">
    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
      <li class="nav-item">
        <a class="nav-link" href="/">Home</a>
      </li>
      <li class="nav-item">
        <a class="nav-link active" aria-current="page" href="/jobPostings">Job Postings</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/companies">Companies</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/roles">Roles</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/skills">Skills</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/skillPlans">Skill Plans</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/postingsSkills">Postings Skills</a>
      </li>
    </ul>
  </div>
  <form class="d-flex align-items-center" id="search-job-posting-html" method='GET' action='/jobPostings'>
  <div class="input-group me-2 flex-grow-1">
    <input class="form-control" 
           type="text" 
           placeholder="Search by job title" 
           aria-label="Search" 
           name="jobTitle" 
           id="input-jobTitle-html-search" 
           value="{{searchTerm}}"
           style="min-width: 300px;">
  </div>
  <button class="btn btn-outline-success me-2" type="submit">Search</button>
  <a href='/jobPostings' class="btn btn-outline-success">Reset</a>
</form>
</nav>

{{!-- database table---------------------------------------------------------------------------------------------------- --}}

<div class="custom-table-responsive">
  <table id="job-postings-table" class="custom-table custom-table-bordered custom-table-striped custom-table-hover">
      <caption>List of Job Postings</caption>
      {{!-- Header section --}}
      <thead>
          <tr>
              <th>ID</th>
              <th>Company</th>
              <th>Role</th>
              <th>Job Title</th>
              <th>Date Posted</th>
              <th>Date Applied</th>
              <th>Status</th>
              <th>Description</th>
              <th>Annual Salary</th>
              <th>Salary Currency</th>
              <th>Location</th>
              <th>Work Mode</th>
              <th>Edit</th>
              <th>Delete</th>
          </tr>
      </thead>
      {{!-- Body section --}}
      <tbody>
          {{#each data}}
          <tr>
              <td>{{this.idPosting}}</td>
              <td>{{this.companyName}}</td>
              <td>{{this.role}}</td>
              <td>{{this.jobTitle}}</td>
              <td>{{this.datePosted}}</td>
              <td>{{this.dateApplied}}</td>
              <td>{{this.status}}</td>
              <td>{{this.description}}</td>
              <td>{{this.annualSalary}}</td>
              <td>{{this.salaryCurrency}}</td>
              <td>{{this.location}}</td>
              <td>{{this.workMode}}</td>
              <td><button class="btn btn-primary btn-sm" onclick="editJobPosting({{this.idPosting}})">Edit</button></td>
              <td><button class="btn btn-danger btn-sm" onclick="deleteJobPosting({{this.idPosting}})">Delete</button></td>
          </tr>
          {{/each}}
      </tbody>
  </table>
</div>

<script src="/js/delete_job_posting.js"></script>

{{!-- Form to add a record to the table  -----------------------------------------------------}}

<h2>Add Job Posting with AJAX</h2>
<p>To add a new person, please enter their information below and click 'Submit'!</p>
<form id="add-job-posting-form-ajax">
    
    <label for="input-idCompany-ajax">Company: </label>
    <select name="input-idCompany-ajax" id="input-idCompany-ajax" required>
        <option value="">Select a Company</option>
        {{#each companies}}
        <option value="{{this.idCompany}}">{{this.companyName}}</option>
        {{/each}}
    </select>
    
    <label for="input-idRole-ajax">Role: </label>
    <select name="input-idRole-ajax" id="input-idRole-ajax">
        <option value="">Select a Role (Optional)</option>
        {{#each roles}}
        <option value="{{this.idRole}}">{{this.role}}</option>
        {{/each}}
    </select>

    <label for="input-jobTitle-ajax">Job Title: </label>
    <input type="text" name="input-jobTitle-ajax" id="input-jobTitle-ajax" required>

    <label for="input-datePosted-ajax">Date Posted: </label>
    <input type="date" name="input-datePosted-ajax" id="input-datePosted-ajax">

    <label for="input-dateApplied-ajax">Date Applied: </label>
    <input type="date" name="input-dateApplied-ajax" id="input-dateApplied-ajax">

    <label for="input-status-ajax">Status: </label>
    <select name="input-status-ajax" id="input-status-ajax" required>
        <option value="">Select Status</option>
        <option value="Under Review">Under Review</option>
        <option value="Interview Scheduled">Interview Scheduled</option>
        <option value="Applied">Applied</option>
        <option value="Rejected">Rejected</option>
        <option value="Offer Extended">Offer Extended</option>
    </select>

    <label for="input-description-ajax">Description: </label>
    <textarea name="input-description-ajax" id="input-description-ajax"></textarea>

    <label for="input-annualSalary-ajax">Annual Salary: </label>
    <input type="number" step="0.01" name="input-annualSalary-ajax" id="input-annualSalary-ajax">

    <label for="input-salaryCurrency-ajax">Salary Currency: </label>
    <input type="text" name="input-salaryCurrency-ajax" id="input-salaryCurrency-ajax">

    <label for="input-location-ajax">Location: </label>
    <input type="text" name="input-location-ajax" id="input-location-ajax">

    <label for="input-workMode-ajax">Work Mode: </label>
    <input type="text" name="input-workMode-ajax" id="input-workMode-ajax">

    <input type="submit" value="Submit">
</form>

{{!-- Embed our javascript to handle the DOM manipulation and AJAX request --}}
<script src="/js/add_job_posting.js"></script>

{{!-- Update a job posting----------------------------------------------------------------------------- --}}

<h2>Update Job Posting</h2>
<p>To update a specific job posting, select the job title from the drop-down menu on the left and update the details on the right.</p>
<form id="update-job-posting-form-ajax">
    <label for="input-job-title">Job Title: </label>
    <select name="input-job-title" id="job-posting-select">
        <option value="">Select a Job Posting</option>
        {{#each data}}
        <option value="{{this.idPosting}}">{{this.jobTitle}} at {{this.companyName}}</option>
        {{/each}}
    </select>

    <label for="input-company">Company: </label>
    <select name="input-company" id="input-company-update">
        <option value="">Select a Company</option>
        {{#each companies}}
        <option value="{{this.idCompany}}">{{this.companyName}}</option>
        {{/each}}
    </select>

    <label for="input-role">Role: </label>
    <select name="input-role" id="input-role-update">
        <option value="">Select a Role</option>
        {{#each roles}}
        <option value="{{this.idRole}}">{{this.role}}</option>
        {{/each}}
    </select>

    <label for="input-job-title">Job Title: </label>
    <input type="text" id="input-job-title-update" name="jobTitle">

    <label for="input-date-posted">Date Posted: </label>
    <input type="date" name="input-date-posted" id="input-date-posted-update">

    <label for="input-date-applied">Date Applied: </label>
    <input type="date" name="input-date-applied" id="input-date-applied-update">

    <label for="input-status">Status: </label>
    <select name="input-status" id="input-status-update">
        <option value="">Select Status</option>
        <option value="Applied">Applied</option>
        <option value="Interviewing">Interviewing</option>
        <option value="Offered">Offered</option>
        <option value="Rejected">Rejected</option>
    </select>

    <label for="input-description">Description: </label>
    <textarea name="input-description" id="input-description-update"></textarea>

    <label for="input-annual-salary">Annual Salary: </label>
    <input type="number" name="input-annual-salary" id="input-annual-salary-update" step="0.01">

    <label for="input-salary-currency">Salary Currency: </label>
    <input type="text" name="input-salary-currency" id="input-salary-currency-update">

    <label for="input-location">Location: </label>
    <input type="text" name="input-location" id="input-location-update">

    <label for="input-work-mode">Work Mode: </label>
    <input type="text" name="input-work-mode" id="input-work-mode-update">

    <input type="submit" value="Update Job Posting">
</form>
<script src="./js/update_job_posting.js"></script>


{{!-- <script>
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('job-postings-table');

    if (table) {
        table.addEventListener('click', function(e) {
            if (e.target.classList.contains('edit-btn')) {
                const row = e.target.closest('tr');
                toggleEditMode(row, true);
            } else if (e.target.classList.contains('save-btn')) {
                const row = e.target.closest('tr');
                saveChanges(row);
            } else if (e.target.classList.contains('cancel-btn')) {
                const row = e.target.closest('tr');
                toggleEditMode(row, false);
            }
        });
    } else {
        console.error('Table with id "job-postings-table" not found');
    }
});

    function toggleEditMode(row, isEdit) {
        const editables = row.querySelectorAll('.editable');
        editables.forEach(td => {
            td.querySelector('.view-mode').style.display = isEdit ? 'none' : '';
            td.querySelector('.edit-mode').style.display = isEdit ? '' : 'none';
        });
        row.querySelector('.edit-btn').style.display = isEdit ? 'none' : '';
        row.querySelector('.save-btn').style.display = isEdit ? '' : 'none';
        row.querySelector('.cancel-btn').style.display = isEdit ? '' : 'none';
    }

    function saveChanges(row) {
        const id = row.id.split('-')[1];
        const data = {
            idPosting: id
        };

        row.querySelectorAll('.editable').forEach(td => {
            const field = td.dataset.field;
            const editElem = td.querySelector('.edit-mode');
            data[field] = editElem.value;
        });

        // Send AJAX request to update the data
        var xhttp = new XMLHttpRequest();
        xhttp.open("PUT", "/update-job-posting", true);
        xhttp.setRequestHeader("Content-type", "application/json");

        xhttp.onreadystatechange = function() {
            if (this.readyState == 4) {
                if (this.status == 200) {
                    try {
                        const updatedData = JSON.parse(this.responseText);
                        updateRowData(row, updatedData);
                        toggleEditMode(row, false);
                    } catch (error) {
                        console.error("Error parsing response:", error);
                    }
                } else {
                    console.error("Error updating job posting. Status:", this.status);
                }
            }
        };

        xhttp.send(JSON.stringify(data));
    }

    function updateRowData(row, data) {
        row.querySelectorAll('.editable').forEach(td => {
            const field = td.dataset.field;
            const viewElem = td.querySelector('.view-mode');
            const editElem = td.querySelector('.edit-mode');
            
            if (field === 'datePosted' || field === 'dateApplied') {
                viewElem.textContent = formatDate(data[field], 'display');
                editElem.value = formatDate(data[field], 'input');
            } else {
                viewElem.textContent = data[field];
                if (editElem.tagName === 'SELECT') {
                    editElem.value = data[field + 'Id'] || '';  // Assuming the ID field is named like companyId, roleId
                } else {
                    editElem.value = data[field];
                }
            }
        });
    }

    function formatDate(dateString, format = 'display') {
        if (!dateString) return '';
        const date = new Date(dateString);
        if (format === 'input') {
            return date.toISOString().split('T')[0];
        } else {
            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
        }
    }
});
</script>

<script src="/js/update_job_posting.js"></script> --}}
